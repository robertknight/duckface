#pragma once

// this file was automatically generated from {{input-file}}
// by duckface

{{header}}

{{#interfaces}}
template <class T>
class {{name}}Iface;
class {{name}}IfaceBase;

class {{name}}
{
public:
	/** Construct a {{name}} pointer from an object of type T.
	  * Calling this method will produce a compile-time error if T lacks
	  * one or more of the methods in this interface.
	  */
	template <class T>
	{{name}}(T* object);
	{{name}}();

	// methods declared in the {{name}} interface
	{{#methods}}
	{{return-type}} {{name}}({{param-list}}){{#has-qualifiers}} {{/has-qualifiers}}{{qualifiers}};
	{{/methods}}

	/** Operator to allow {{name}} instances to be accessed like pointer
	  * classes (eg. using interfacePtr->someMethod() instead of interfacePtr.someMethod())
	  */
	{{name}}* operator->() {
		return this;
	}

	// Equality operators.  Two interface pointers are equal if they refer
	// to the same underlying object.
	bool operator==(const {{name}}& other) const;
	bool operator!=(const {{name}}& other) const;

	template <class T>
	bool operator==(T* other) const;
	template <class T>
	bool operator!=(T* other) const;

	operator bool() const;

	// access to the underlying object
	void* data();
	const void* data() const;

private:
	{{name}}IfaceBase* m_impl;
	void* m_obj;
};
{{/interfaces}}

{{#interfaces}}
// Base class for classes which implement method dispatch for {{name}}.  There is one
// {{name}}IfaceBase instance per concrete-type.
class {{name}}IfaceBase
{
public:
	{{#methods}}
	virtual {{return-type}} {{name}}(void* inst{{#has-params}}, {{/has-params}}{{param-list}}) {{qualifiers}} = 0;
	{{/methods}}
};

template <class T>
class {{name}}Iface : public {{name}}IfaceBase
{
public:
	{{#methods}}
	virtual {{return-type}} {{name}}(void* inst{{#has-params}}, {{/has-params}}{{param-list}}) {{qualifiers}} {
		{{#has-return-value}}return {{/has-return-value}}static_cast<T*>(inst)->{{name}}({{arg-list}});
	};
	{{/methods}}

	static {{name}}Iface<T>* instance() {
		static {{name}}Iface<T> inst;
		return &inst;
	}
};

template <class T>
inline {{name}}::{{name}}(T* inst)
: m_impl({{name}}Iface<T>::instance())
, m_obj(inst)
{
}

inline {{name}}::{{name}}()
: m_impl(0)
, m_obj(0)
{
}

{{#methods}}
inline {{return-type}} {{iface-name}}::{{name}}({{param-list}}) {{qualifiers}}
{
	{{#has-return-value}}return {{/has-return-value}}m_impl->{{name}}(m_obj{{#has-params}}, {{/has-params}}{{arg-list}});
}
{{/methods}}

inline bool {{name}}::operator==(const {{name}}& other) const
{
	return m_obj == other.m_obj;
}

inline bool {{name}}::operator!=(const {{name}}& other) const
{
	return m_obj != other.m_obj;
}

inline {{name}}::operator bool() const
{
	return m_obj != 0;
}

template <class T>
inline bool {{name}}::operator==(T* other) const
{
	return m_obj == other;
}

template <class T>
inline bool {{name}}::operator!=(T* other) const
{
	return m_obj != other;
}

inline void* {{name}}::data()
{
	return m_obj;
}

const void* {{name}}::data() const
{
	return m_obj;
}
{{/interfaces}}

